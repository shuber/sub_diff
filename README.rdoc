= sub_diff - {<img src="https://secure.travis-ci.org/shuber/sub_diff.png"/>}[http://travis-ci.org/shuber/sub_diff] {<img src="https://codeclimate.com/github/shuber/sub_diff/badges/gpa.svg" />}[https://codeclimate.com/github/shuber/sub_diff] {<img src="https://codeclimate.com/github/shuber/sub_diff/badges/coverage.svg" />}[https://codeclimate.com/github/shuber/sub_diff]

An enumerable collection of "diff" objects for your {<tt>String#sub</tt>}[http://ruby-doc.org//core-2.2.0/String.html#method-i-sub] and {<tt>String#gsub</tt>}[http://ruby-doc.org//core-2.2.0/String.html#method-i-gsub] replacements


== Installation

  gem install sub_diff


== Usage

This gem introduces two new methods to <tt>String</tt>, <tt>sub_diff</tt> and <tt>gsub_diff</tt>, which accept the same arguments as their <tt>sub</tt> and <tt>gsub</tt> counterparts.

  replaced = 'this is a test'.gsub_diff(/(\S*is)/, 'replaced(\1)')

The <tt>replaced</tt> object behaves just like a <tt>String</tt>.
  
  puts replaced #=> replaced(this) replaced(is) a test

It also allows you to check if the replacement actually changed anything.

  replaced.changed? #=> true

For a closer look at the changes, you can enumerate thru the returned replacement object, yielding a <tt>Diff</tt> object for each iteration. Each <tt>Diff</tt> also behaves like a <tt>String</tt> but includes a few additional methods.
  
  replaced.each do |diff|
    puts "    value: #{diff.value.inspect}"
    puts "value_was: #{diff.value_was.inspect}"
    puts " changed?: #{diff.changed?}"
  end

  #=>     value: "replaced(this)"
  #=> value_was: "this"
  #=>  changed?: true

  #=>     value: " "
  #=> value_was: " "
  #=>  changed?: false

  #=>     value: "replaced(is)"
  #=> value_was: "is"
  #=>  changed?: true

  #=>     value: " a test"
  #=> value_was: " a test"
  #=>  changed?: false


= Testing

  bundle exec rspec


== Contributing

* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a future version unintentionally.
* Commit, do not mess with Rakefile, version, or history. (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.
